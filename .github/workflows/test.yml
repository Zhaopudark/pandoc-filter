name: Test and Build
on: 
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
  test_and_build_job:
    runs-on: ubuntu-latest
    name: Test and Build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: 3.12
      - name: Configurations and Install Dependencies
        shell: pwsh
        run: |
          if (Get-Command conda -ErrorAction SilentlyContinue) {
            Write-Host "Conda detected, use conda."
            $conda_env_name = "pandoc_filter_dev"
            if (-not (conda env list | Select-String -Pattern $conda_env_name)) {
              conda create --name $conda_env_name python=3.12 --yes --quiet
            } 
            conda activate $conda_env_name
            conda install --update-deps pandoc>=3.1 -c conda-forge --yes --quiet
          } else {
            Write-Host "Conda not detected."
            if (Get-Command pandoc -ErrorAction SilentlyContinue) {
              Write-Host "Pandoc detected."
            }else{
              Write-Host "Pandoc not detected, install pandoc."
              if($IsLinux){
                wget https://github.com/jgm/pandoc/releases/download/3.1.11/pandoc-3.1.11-1-amd64.deb -o pandoc-amd64.deb
                sudo dpkg -i pandoc-amd64.deb
              }elseif($IsWindows){
                winget search pandoc
                winget install --id JohnMacFarlane.Pandoc
              }else{
                throw "Unsupported platform. Only Linux and Windows are supported."
              }
            }
          }
          pip install -r "${PSScriptRoot}/requirements.txt" --quiet
          pip install -U setuptools build --quiet
          pip install -U pytest pytest-cov --quiet
      - name: Local Test
        env:
          OSS_ENDPOINT_NAME: ${{ secrets.OSS_ENDPOINT_NAME }}
          OSS_BUCKET_NAME: ${{ secrets.OSS_BUCKET_NAME }}
          OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
          OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
        shell: pwsh
        run: |
          conda activate $conda_env_name
          $src_path = (Get-Item "./src").FullName
          $Env:PYTHONPATH = $src_path
          Write-Host "Python path:" $Env:PYTHONPATH
          pytest "$root_path/tests" --log-level=INFO --cov $Env:PYTHONPATH --cov-report=xml
      - uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}